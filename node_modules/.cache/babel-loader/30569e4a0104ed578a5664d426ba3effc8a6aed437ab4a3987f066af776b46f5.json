{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: 'ui',\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    to\n  },\n  reducers: {\n    addItemsToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n    removeItemsFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n      // state.totalPrice--;\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id != id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    },\n    clearItemsFromCart(state, action) {\n      if (state.totalQuantity >= 1) {\n        state.items = [];\n        state.totalQuantity = 0;\n      } else {\n        alert('cart is empty bruh');\n      }\n    },\n    orderItemsFromCart(state, action) {\n      if (state.totalQuantity >= 1) {\n        state.totalQuantity = 0;\n        state.items = [];\n        alert('ordered your food enjoy');\n      } else {\n        alert('first add food items in your cart');\n      }\n    }\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","cartSlice","name","initialState","items","totalQuantity","to","reducers","addItemsToCart","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemsFromCart","filter","clearItemsFromCart","alert","orderItemsFromCart","cartActions","actions"],"sources":["/home/alok/red-food-app/01-starting-project/src/store/cart-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\n\nconst cartSlice = createSlice({\n    name: 'ui',\n    initialState: {\n        items: [],\n        totalQuantity: 0,\n        to\n    },\n    reducers: {\n        addItemsToCart(state, action){\n            const newItem = action.payload;\n\n            const existingItem = state.items.find(item => item.id === newItem.id);\n            state.totalQuantity++;\n            if(!existingItem){\n                state.items.push({id: newItem.id,\n                     price: newItem.price,\n                      quantity: 1,\n                       totalPrice: newItem.price,\n                        name: newItem.title})\n            }else{\n                existingItem.quantity++;\n                existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n            }\n        },\n        removeItemsFromCart(state, action){\n            const id = action.payload;\n            const existingItem = state.items.find(item => item.id === id);\n            state.totalQuantity--;\n            // state.totalPrice--;\n            if(existingItem.quantity === 1){\n                state.items = state.items.filter(item => item.id != id);\n            }else{\n                existingItem.quantity--;\n                existingItem.totalPrice = existingItem.totalPrice- existingItem.price\n            }\n        },\n        clearItemsFromCart(state, action){\n            if(state.totalQuantity >= 1){\n                state.items=[];\n                state.totalQuantity=0;\n            }else{\n                alert('cart is empty bruh')\n            }\n        },\n        orderItemsFromCart(state, action){\n            if(state.totalQuantity >=1){\n                state.totalQuantity=0;\n                state.items =[];\n                alert('ordered your food enjoy')\n            }else{\n                alert('first add food items in your cart')\n            }\n            \n        }\n    }\n})\n\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC1BE,IAAI,EAAE,IAAI;EACVC,YAAY,EAAE;IACVC,KAAK,EAAE,EAAE;IACTC,aAAa,EAAE,CAAC;IAChBC;EACJ,CAAC;EACDC,QAAQ,EAAE;IACNC,cAAc,CAACC,KAAK,EAAEC,MAAM,EAAC;MACzB,MAAMC,OAAO,GAAGD,MAAM,CAACE,OAAO;MAE9B,MAAMC,YAAY,GAAGJ,KAAK,CAACL,KAAK,CAACU,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;MACrEP,KAAK,CAACJ,aAAa,EAAE;MACrB,IAAG,CAACQ,YAAY,EAAC;QACbJ,KAAK,CAACL,KAAK,CAACa,IAAI,CAAC;UAACD,EAAE,EAAEL,OAAO,CAACK,EAAE;UAC3BE,KAAK,EAAEP,OAAO,CAACO,KAAK;UACnBC,QAAQ,EAAE,CAAC;UACVC,UAAU,EAAET,OAAO,CAACO,KAAK;UACxBhB,IAAI,EAAES,OAAO,CAACU;QAAK,CAAC,CAAC;MACjC,CAAC,MAAI;QACDR,YAAY,CAACM,QAAQ,EAAE;QACvBN,YAAY,CAACO,UAAU,GAAGP,YAAY,CAACO,UAAU,GAAGT,OAAO,CAACO,KAAK;MACrE;IACJ,CAAC;IACDI,mBAAmB,CAACb,KAAK,EAAEC,MAAM,EAAC;MAC9B,MAAMM,EAAE,GAAGN,MAAM,CAACE,OAAO;MACzB,MAAMC,YAAY,GAAGJ,KAAK,CAACL,KAAK,CAACU,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAC7DP,KAAK,CAACJ,aAAa,EAAE;MACrB;MACA,IAAGQ,YAAY,CAACM,QAAQ,KAAK,CAAC,EAAC;QAC3BV,KAAK,CAACL,KAAK,GAAGK,KAAK,CAACL,KAAK,CAACmB,MAAM,CAACR,IAAI,IAAIA,IAAI,CAACC,EAAE,IAAIA,EAAE,CAAC;MAC3D,CAAC,MAAI;QACDH,YAAY,CAACM,QAAQ,EAAE;QACvBN,YAAY,CAACO,UAAU,GAAGP,YAAY,CAACO,UAAU,GAAEP,YAAY,CAACK,KAAK;MACzE;IACJ,CAAC;IACDM,kBAAkB,CAACf,KAAK,EAAEC,MAAM,EAAC;MAC7B,IAAGD,KAAK,CAACJ,aAAa,IAAI,CAAC,EAAC;QACxBI,KAAK,CAACL,KAAK,GAAC,EAAE;QACdK,KAAK,CAACJ,aAAa,GAAC,CAAC;MACzB,CAAC,MAAI;QACDoB,KAAK,CAAC,oBAAoB,CAAC;MAC/B;IACJ,CAAC;IACDC,kBAAkB,CAACjB,KAAK,EAAEC,MAAM,EAAC;MAC7B,IAAGD,KAAK,CAACJ,aAAa,IAAG,CAAC,EAAC;QACvBI,KAAK,CAACJ,aAAa,GAAC,CAAC;QACrBI,KAAK,CAACL,KAAK,GAAE,EAAE;QACfqB,KAAK,CAAC,yBAAyB,CAAC;MACpC,CAAC,MAAI;QACDA,KAAK,CAAC,mCAAmC,CAAC;MAC9C;IAEJ;EACJ;AACJ,CAAC,CAAC;AAGF,OAAO,MAAME,WAAW,GAAG1B,SAAS,CAAC2B,OAAO;AAE5C,eAAe3B,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}